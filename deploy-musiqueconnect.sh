#!/bin/bash

# ðŸš€ Script de DÃ©ploiement MusiqueConnect.app
# Auteur: Guillaume Hetu
# Date: 2024-01-15

set -e  # ArrÃªter en cas d'erreur

echo "ðŸŽµ DÃ©ploiement MusiqueConnect.app"
echo "=================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier que nous sommes dans le bon rÃ©pertoire
if [ ! -f "package.json" ]; then
    print_error "Ce script doit Ãªtre exÃ©cutÃ© depuis le rÃ©pertoire racine du projet"
    exit 1
fi

# Ã‰tape 1: VÃ©rifier les dÃ©pendances
print_status "VÃ©rification des dÃ©pendances..."
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas installÃ©"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas installÃ©"
    exit 1
fi

if ! command -v vercel &> /dev/null; then
    print_warning "Vercel CLI n'est pas installÃ©. Installation..."
    npm install -g vercel
fi

print_success "DÃ©pendances vÃ©rifiÃ©es"

# Ã‰tape 2: Installer les dÃ©pendances
print_status "Installation des dÃ©pendances..."
npm install
print_success "DÃ©pendances installÃ©es"

# Ã‰tape 3: VÃ©rifier les variables d'environnement
print_status "VÃ©rification des variables d'environnement..."
if [ ! -f ".env" ] && [ ! -f ".env.local" ]; then
    print_warning "Fichier .env non trouvÃ©. VÃ©rifiez que les variables sont configurÃ©es dans Vercel"
fi

# Ã‰tape 4: Build du projet
print_status "Build du projet..."
npm run build
print_success "Build terminÃ©"

# Ã‰tape 5: Tests de base
print_status "ExÃ©cution des tests..."
if npm test 2>/dev/null; then
    print_success "Tests passÃ©s"
else
    print_warning "Tests non configurÃ©s ou Ã©chouÃ©s - continuation du dÃ©ploiement"
fi

# Ã‰tape 6: DÃ©ploiement Vercel
print_status "DÃ©ploiement sur Vercel..."

# VÃ©rifier si l'utilisateur est connectÃ© Ã  Vercel
if ! vercel whoami &> /dev/null; then
    print_warning "Vous n'Ãªtes pas connectÃ© Ã  Vercel. Connexion requise..."
    vercel login
fi

# DÃ©ploiement de production
print_status "DÃ©ploiement de production en cours..."
vercel --prod --yes

print_success "DÃ©ploiement terminÃ©!"

# Ã‰tape 7: VÃ©rification post-dÃ©ploiement
print_status "VÃ©rification post-dÃ©ploiement..."

# Attendre un peu pour que le dÃ©ploiement soit propagÃ©
sleep 10

# VÃ©rifier l'accessibilitÃ© du site
if curl -s -o /dev/null -w "%{http_code}" https://musiqueconnect.app | grep -q "200\|301\|302"; then
    print_success "Site accessible sur https://musiqueconnect.app"
else
    print_warning "Site pas encore accessible - propagation DNS en cours"
fi

# Ã‰tape 8: Configuration finale
print_status "Configuration finale..."

echo ""
echo "ðŸŽ‰ DÃ©ploiement MusiqueConnect.app terminÃ©!"
echo ""
echo "ðŸ“‹ Prochaines Ã©tapes:"
echo "1. VÃ©rifier la configuration Firebase"
echo "2. Configurer les domaines autorisÃ©s dans Firebase"
echo "3. Configurer Google OAuth"
echo "4. Configurer Microsoft OAuth"
echo "5. Tester toutes les fonctionnalitÃ©s"
echo ""
echo "ðŸ”— URLs importantes:"
echo "- Production: https://musiqueconnect.app"
echo "- Vercel Dashboard: https://vercel.com/dashboard"
echo "- Firebase Console: https://console.firebase.google.com"
echo ""
echo "ðŸ“š Documentation:"
echo "- Guide complet: CONFIGURATION_CLOUDFLARE_FIREBASE_VERCEL.md"
echo "- Guide de test: test-musiqueconnect-app.md"
echo ""

print_success "Script de dÃ©ploiement terminÃ© avec succÃ¨s!" 